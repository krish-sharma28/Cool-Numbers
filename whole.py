import webbrowser
import sys
import random
def main():
    key = 0
    welcome_string = """Welcome to 24! \n \
    The game of adding, subtracting, multiplying, and dividing 
    4 numbers to reach 24."""
    
    # handle logic for leaderboard, help, and play
    while key == 0:
        print(welcome_string)
        gather = input("What would you like to do? ")
        print(gather)
        if gather.lower() == 'leaderboard':
            leaderboard()
        elif gather.lower() == 'rules':
            help()
        elif gather.lower() == 'play':
            players, rounds = card()
            key = 1
            play_game(players, rounds)
            break
        elif gather.lower() == 'exit':
            return print("Exiting program.")
        else:
            print("""Not a valid input! Choose between leaderboard, rules, 
                  and play. Write 'exit' at any time to end program.""")
    # while key == 1:
    #     print("-----------------")
    #     print(f"| {c_result[0]} | {c_result[1]} | {c_result[2]} | {c_result[3]} |")
    #     print("-----------------")
    #     gather = input("Enter your answer in reverse polish notation. ")
        
    #     if score(gather):
    #         print("Yippee!")
    #         key == 0
    #     elif gather.lower() == 'exit':
    #         return print("Exiting program.")
    #     else:
    #         print("Incorrect! Try Again!")
    #         pass
        
def leaderboard():
    pass

def help():
    site = "https://mathworld.wolfram.com/ReversePolishNotation.html"
    string = """After typing 'play' into the prompt box, you will be greeted 
    with a card. \n 
    ----------------- \n 
    | 2 | 3 | 2 | 4 | \n 
    ----------------- \n 
    To play, enter your expression in reverse polish notation (RPN). \n 
    If you do not know RPN, type 'RPN' into the text box. 
    Otherwise, type 'return' """
    print(string)
    gather = input("What would you like to do? ")
    if gather.lower() == 'exit':
        print("Exiting program.")
        sys.exit()
    if gather.lower() == "rpn":
        webbrowser.open_new(site)
        return
    if gather.lower() == "return":
        return
    else:
        print("not an option, oh well.")
        return

# For Regan
def regan_validator(user_input, hand):
     # Regan's funtion here, assume true for now
            # hand (list): 4-card hand that's generated by Jin's draw_unique_hand() method.
    return True        


# edited by Jin: class Creation, card(), and play_game. 
class Creation:
    def __init__(self):
        # Instance attributes
        self.full_deck = [val for val in range(1, 14) for _ in range(4)]
        self.recent_hands = []

    def draw_unique_hand(self, max_attempts=100):
        """
        Draw a unique 4-card hand from the given deck that has not been used recently.

        Parameters:
            deck (list of int): The current available cards in the deck.
            recent_hands (list of tuple): A list of recently used hands, sorted (e.g., [(1, 2, 3, 4)])
            max_attempts (int): Maximum number of attempts to find a unique hand

        Returns:
            list of int: A 4-card hand not in recent_hands
            or raises an Exception if unable to find a unique hand
        """
        if len(self.full_deck) < 4:
            raise ValueError("Not enough cards in the deck to draw a hand.")
        
        for _ in range(max_attempts):
            hand = random.sample(self.full_deck, 4)  # Randomly draw 4 cards
            hand_tuple = tuple(sorted(hand))

            if hand_tuple not in self.recent_hands:  # Ensure it's a unique hand
                self.recent_hands.append(hand_tuple)
                return hand
        raise Exception("Failed to find a unique hand after max attempts.")    
def card():
    players = []
    while True:
        name = input("Enter the name of a player (or type 'done'): ")
        if name.lower() == 'done':
            break
        players.append(name)
    
    while True:
        try:
            rounds = int(input("How many rounds do you want to play? "))
            if rounds > 0:
                break
            else:
                print("Enter a positive number.")
        except ValueError:
            print("Enter a valid number.")
    
    return players, rounds

def play_game(players, rounds):
    game = Creation()
    scores = {player: 0 for player in players} #could be replaced my score(string) function, it is just sample

    for r in range(1, rounds + 1):
        print(f"\nRound {r}")
        hand = game.draw_unique_hand()
        print(f"Your hand: {hand}")

        player_name = input("Who solved it? (Enter name or 'skip'): ")
        if player_name.lower() == 'skip':
            print("No one scored this round.")
            continue
        if player_name not in scores:
            print("Invalid player name.")
            continue

        solution = input("Enter your solution in RPN: ")
        if regan_validator(solution, hand): # needs edit
            print("Correct! +1 point")
            scores[player_name] += 1
        else:
            print("Incorrect.")
    print("\nFinal Scores:")
    for player, score in scores.items():
        print(f"{player}: {score}")



def score(string):
    return False

if __name__ == "__main__":
    main()